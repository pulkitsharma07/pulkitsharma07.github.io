<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <generator uri="http://jekyllrb.com" version="3.5.2">Jekyll</generator>
  
  
  <link href="https://pulkitsharma07.github.io/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://pulkitsharma07.github.io/" rel="alternate" type="text/html" />
  <updated>2019-07-13T04:18:59+05:30</updated>
  <id>https://pulkitsharma07.github.io//</id>

  
    <title type="html">Pulkit Sharma</title>
  

  
    <subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle>
  

  

  
  
    <entry>
      
      <title type="html">[TWPOS-1] From AC/DC to Djent to Reality</title>
      
      <link href="https://pulkitsharma07.github.io/2019/07/13/twpos-1/" rel="alternate" type="text/html" title="[TWPOS-1] From AC/DC to Djent to Reality" />
      <published>2019-07-13T03:25:00+05:30</published>
      <updated>2019-07-13T03:25:00+05:30</updated>
      <id>https://pulkitsharma07.github.io/2019/07/13/twpos-1</id>
      <content type="html" xml:base="https://pulkitsharma07.github.io/2019/07/13/twpos-1/">&lt;p&gt;[TWPOS-1] From AC/DC to Reality
— Take With a Pinch Of Salt — 
Reviewing: &lt;a href=&quot;https://www.youtube.com/watch?v=O24AipZ-buQ&quot;&gt;https://www.youtube.com/watch?v=O24AipZ-buQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&amp;gt; Very strong back beat during Angus Young’s “section”, constant BPM for a long time, 10/10  drum, guitar, bass work, excellent musicianship.&lt;/p&gt;

&lt;p&gt;-&amp;gt; Excellent lighting operator, (would rate 9/10). Excellent even if programmed, way more excellent if manual.&lt;/p&gt;

&lt;p&gt;The lights are not usually programmed (Considering even when bands like Meshuggah, use a ‘human’ light man. Meshuggah has one of the most complex rhythmical patterns I have heard in some-what-conventional-metal songs. Considering the complexity can be achieved by just a single bit bandwidth. Patterns of 0 and 1 engraved in a song, a biggg number. 100111100101000000…People usually term djent as 0s and 1s. “Its just 0s and 1s”.&lt;/p&gt;

&lt;p&gt;Do you know what this means? Computer guys will probably think them as bits. 0s and 1s implying something related to computers… No it is not.. It’s not digital, not made from 0s and 1s. People say 0s and 1s to depict the ‘guitar tabs’ for a djent song. 0 =&amp;gt; open string,  1 =&amp;gt; play a low note on some low(heavy) string.&lt;/p&gt;

&lt;p&gt;Yeah, so I think calling them 0s and 1s is not okay, because there is another state, apart from these 0s and 1s.&lt;/p&gt;

&lt;p&gt;Let’s take an example, lets say I say the song is made of 0s and 1s:&lt;/p&gt;

&lt;p&gt;so I may describe that sequence to you as (when written on paper (improperly)): 001100111, 00110011110 (seq A)&lt;/p&gt;

&lt;p&gt;Someone who knows (the third state), will write the same song as: 00 110 0111, 00 110 0111 10 (seq B)&lt;/p&gt;

&lt;p&gt;The spaces here implies temporal “gaps” between the bits.&lt;/p&gt;

&lt;p&gt;As in, all the 0s and 1s are not equidistant from each other on a timeline of the song. There are gaps (often of a size which is multiple of the smallest unit of the time signature, the root tempo. I consider the root tempo, to be the BPM which cuts through all the possible time signatures used in the song, i.e. for any click track, all the clicks (regardless whether it is an accented note), while lie on the BPM’s note, consider it to be 1/1 BPM.), This root tempo is what good drummers feel inside them. Any drum strokes played on these time slices will &lt;em&gt;probably&lt;/em&gt; not sound offbeat, if played in a correct manner.&lt;/p&gt;

&lt;p&gt;If we imagine these sequence of the bits, where each bit is placed precisely over the time slice of the root tempo. We can see that equidistant time slices cannot represent the actual sound (if song is re-played back from by parsing the bits). This is because their should be temporal “gaps” present between these bits. Which specifies the number of ms the guitarist actually waits for the &lt;strong&gt;valid&lt;/strong&gt; time slice to arrive. Emphasis on “valid” because,  there are multiple time slices which he ignores, before playing the right one. &lt;/p&gt;

&lt;p&gt;Keeping gaps of time slices can evoke a “non-digital” feeling inside human minds. Because if the time slices are not skipped, they would sound menacing to our ears, our mind. There will be no rest for our “analogue” mind.&lt;/p&gt;

&lt;p&gt;Yeah, so therefore we need to add another bit, to represent a time slices to ignore.&lt;/p&gt;

&lt;p&gt;Therefore,&lt;/p&gt;

&lt;pre&gt;
new_define(bit) =&amp;gt; 3 possible values: [0,1,2]
 0-&amp;gt; Play open string
 1 -&amp;gt; Play a low note on the string
 2 -&amp;gt; Skip this time slice
bit_width(song) =&amp;gt; distance between the bits, i.e between individual timeslices. 
&lt;/pre&gt;

&lt;p&gt;So, blank space corresponds to a bit with value: 2, in seq B, so, seq ~B =&amp;gt; 00211020111, 00211020111210&lt;/p&gt;

&lt;p&gt;and the distance between individual bits is the bit_width.&lt;/p&gt;

&lt;p&gt;If there are multiple tempo changes in the song, then bit_width his should be the HCF of all those sub-tempos, as it is the beat which divides through every tempo in the song. Thus, the bit_width(song) =&amp;gt; HCF(Tempo1,Tempo2, … TempoN) . Most commercially popular songs have N = 1, i.e they have only one sub-tempo, in other words, they only have a single tempo: pop, rock, yada yada yada. My hypothesis: HCF -&amp;gt; 1 is a No No, please have a valid HCF to make the song pleasant to comprehend.&lt;/p&gt;

&lt;p&gt; Back to pop songs, lets take a of a conventional pop song tempo: 80 BPM (any research to give the MODE of the pop song tempos ? The reason I chose MODE is because the MODE actually &lt;strong&gt;exists&lt;/strong&gt; in the database, it is not an imaginary number like the MEAN and MEDIAN. MODE is actually there, you can see it and re-use it. Following the MEAN/MEDIUM may or may not yield the same cognitive results, because it doesn’t even exist in the input set. By trusting them, we are “interpolating” the missing data. Specifically, we are linearly interpolating to fill the gaps in the input dataset of pop song tempos.&lt;/p&gt;

&lt;p&gt;Infact, the accuracy of the interpolation can be measured by RMSE &lt;a href=&quot;https://www.vernier.com/til/1014/&quot;&gt;https://www.vernier.com/til/1014/&lt;/a&gt;,  the root mean squared error, yes so the “classical” regression problem. NO real proof of this scenario being linear.&lt;/p&gt;

&lt;p&gt;If we prove that this gap can be interpolated linearly, can the same be said for the gap between the ‘time slices’ of our reality ?&lt;/p&gt;

&lt;p&gt;If we prove it, we can be sure that we are &lt;em&gt;not&lt;/em&gt; simulated (because there is nothing left for “interpolation”, we have understood everything there is to understand).&lt;/p&gt;

&lt;p&gt;But, if we cannot prove it, we don’t know what lies between these gaps.  For all we know, it could be the clock cycles of a supercomputer, some 1000 years from now. Imagine, where we were technologically 1000 years ago and where we are now, the very screen you are reading this, was a thing farrr beyond imagination.&lt;/p&gt;

&lt;p&gt;And, look at us right now, 1000 years from “them” (our earth 1000 years ago). Consider what we have achieved and what we have done technologically, biologically.&lt;/p&gt;

&lt;p&gt;Now, lets “interpolate” (from one interpolation to another interpolation), and lets make an honest effort to imagine our &lt;strong&gt;state&lt;/strong&gt; 1000 years from now. Consider that &lt;strong&gt;state&lt;/strong&gt; to be part of a set of all possible states, where each one completely representing our life.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;state&lt;/strong&gt;=&amp;gt; the state 1000 years from now.&lt;/p&gt;

&lt;p&gt;Will you interpolate linearly ?&lt;/p&gt;

&lt;p&gt;Or exponentially ?&lt;/p&gt;

&lt;p&gt;I know, both the interpolations are not comparable to each other (time-slice interpolation vs evolutionary interpolation). Its like comparing apple and pears. Some what same, some what different.&lt;/p&gt;

&lt;p&gt;The latter interpolation here represents our “evolution” on Earth, and it is somewhat fairly understood (as compared to our &lt;em&gt;reality&lt;/em&gt;, consciousness), and it does not take a scientist to tell that the rate of evolution is definitely not linear.&lt;/p&gt;

&lt;p&gt;The former interpolation, sort of deals with stubbing our shortest perceived time slice gap. Not just the shortest one in music, but the shortest time gap in reality.&lt;/p&gt;

&lt;p&gt;The very existence of the gap, will conclude that, we cannot divide further, i.e we do not understand things between that gap, thus we “may” be digital.&lt;/p&gt;

&lt;p&gt;Now two points to highlight:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I mentioned: ‘we do not understand ourselves’, I did not say: ‘we cannot understand ourselves’&lt;/li&gt;
  &lt;li&gt;We ‘may’ be digital,i.e. Unable to divide the gap further but that does not actually “prove” we are digital (correction from above), it just helps us to keep the possibility alive of that being true for us… we love &lt;em&gt;theorycrafting&lt;/em&gt; about ourselves).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Explaining 1:&lt;/p&gt;

&lt;p&gt;The smallest &lt;em&gt;known&lt;/em&gt; gap between time-slices is not a constant. The smallest gap can be a constant. A universal constant, to say.&lt;/p&gt;

&lt;p&gt;There difference between what is &lt;strong&gt;known&lt;/strong&gt; and what is the &lt;strong&gt;ground truth&lt;/strong&gt;. &lt;strong&gt;known&lt;/strong&gt; defined by science at Time: &lt;em&gt;T-X&lt;/em&gt;, and &lt;strong&gt;ground truth&lt;/strong&gt; is defined at time &lt;em&gt;T&lt;/em&gt;. What is the ground truth, can be considered as known after 100 years. The sun revolving around the earth was a &lt;strong&gt;ground truth&lt;/strong&gt; once, in a way.&lt;/p&gt;

&lt;p&gt;Therefore, at that state, that is the best known, smallest distance between time slices. But, there is no way to prove, that a smaller time gap won’t exist.&lt;/p&gt;

&lt;p&gt;To perceive that we may reach the quantum levels in sense of technology, but until we fully emulate ourselves, we cannot prove that no smaller time gap exists. The very act of emulating ourselves, will create beings like us, the ones reading this. 1000 years before the &lt;strong&gt;state.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The funny thing is, what I have written, will stand true, even when reading the &lt;strong&gt;state.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Is there a way to prove that the smallest perceivable time slice known as will be exactly equal to the smallest perceivable time slice known 1000 years from now.&lt;/p&gt;

&lt;p&gt;I am considering a 1000 years, to allow biological changes in the human body to happen, to allow perceiving a smaller time gap than the current ones.&lt;/p&gt;

&lt;p&gt;Now, there is another possibility worth considering.&lt;/p&gt;

&lt;p&gt;What if we &lt;strong&gt;have&lt;/strong&gt; the ability to perceive asmaller time gap, but the reality is being “rendered” for us with larger time gaps. Like, a 1 million FPS game running, and where we just go blank between each frame, because we don’t get any inputs during that time from the &lt;strong&gt;reality&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We do not detect the empty gaps, the &lt;strong&gt;reality&lt;/strong&gt; itself is not present to us in the gaps.&lt;/p&gt;

&lt;p&gt;Our reality is what we perceive, what we think, what we type, what we inhale, our ‘state’.&lt;/p&gt;

&lt;p&gt;If there is no reality-state on our time slice, we do not detect it (at least in a sane state). As always, we can speculate that “drugs” allow us the &lt;em&gt;emulate&lt;/em&gt; these missing states.&lt;/p&gt;

&lt;p&gt;Which increases are perception of reality, in which people can think now they have a connection to the self, to the world. &lt;/p&gt;

&lt;p&gt;It is very tempting to think that &lt;em&gt;that&lt;/em&gt; really happens, the feeling is so overwhelming, people can ignore the possibility of our brain emulating the missing reality-states on our actual time slices. Since, there is no &lt;strong&gt;reality&lt;/strong&gt; their, it can put anything on it, even which does not exist, and voila, Chromesthesia.&lt;/p&gt;

&lt;p&gt;Interesting theory, can it be proved ?&lt;/p&gt;

&lt;p&gt;If consider it to be true, does that mean, that current known min_time_slice_gap is actually greater than the actual min_time_slice_gap for humans, which can be in fact smaller/greater than the reality’s time_slice_gap.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If reality is being rendered with a smaller time gap than humans =&amp;gt; We are simulated, as there are events which we can never perceive.&lt;/li&gt;
  &lt;li&gt;If reality is being rendered with a larger time gap than humans =&amp;gt; We &lt;em&gt;may&lt;/em&gt; not be simulated, as may be just going blank in the time gaps, it won’t affect us in any way, because our reality is not affected by those gaps. They don’t &lt;em&gt;exist&lt;/em&gt; in our perceived reality. But we can access a pseudo reality, by emulating reality states on our empty time slices.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Does, the inability to prove the existence of time slice gap , disprove its possibility of its existence ? Are researchers actually working on it ?&lt;/p&gt;

&lt;p&gt;I mean, if a person took this idea to a professor (who has spent his entire life doing conventional studies), what are they chances they he will want to explore something so absurd.. You can put that person into the same set as ‘flat-earthers’, which is definitely not a set to be proud of.&lt;/p&gt;

&lt;p&gt;Who will even give money to this researcher ? Which corporates will be mildly interested in funding this ? simple: No one.&lt;/p&gt;

&lt;p&gt;If no one gives the researcher money, why would he even do the research ? He has to stay alive, he has to eat, he has to prove to society that he is a normal human being, his parents have invested more than 70% of their lives into him. &lt;/p&gt;

&lt;p&gt;Think about you investing 70% of yours to something, not just 70, take 30, even if you invest 30% of anything in anything, whether be it your time, money. You start expecting returns. If I invested 30% of my free time learning guitar, I want to see results, fast ! It is 30%, not 5, not 10, 30% of free time.&lt;/p&gt;

&lt;p&gt;Investors can make your life hell for 1% of their money.&lt;/p&gt;

&lt;p&gt;What about parents, I suppose on average, it is safe to assume that most parents spend 50% of years on their kids here in India. I am not talking about 50% of life, 50% of years, the smallest unit is year.&lt;/p&gt;

&lt;p&gt;Now, when the kid leaves home, there actual life starts (in a way). Now, it is the time-to-reap-your-rewards phase. The parents now want their gifts, their returns, which are: The kid will live a good life, the kid will have money, the kid will be healthy, the kid will have a calm, happy, a joyful life, everything will be good……the kid will take care of them….&lt;/p&gt;

&lt;p&gt;A what does the kid do ? &lt;/p&gt;

&lt;p&gt;He is definitely not going to research on reality.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MISC&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Look at this video: &lt;a href=&quot;https://www.youtube.com/watch?v=dYBZMRWcEBk&quot;&gt;https://www.youtube.com/watch?v=dYBZMRWcEBk&lt;/a&gt;, it is hilarious and a nice intro to djent music !&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      

      
        <category term="fluff" />
      
        <category term="random" />
      
        <category term="twpos" />
      

      

      
        <summary type="html">[TWPOS-1] From AC/DC to Reality — Take With a Pinch Of Salt —  Reviewing: https://www.youtube.com/watch?v=O24AipZ-buQ</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Managing Shell Commands</title>
      
      <link href="https://pulkitsharma07.github.io/2018/08/09/managing-shell-commands/" rel="alternate" type="text/html" title="Managing Shell Commands" />
      <published>2018-08-09T03:30:00+05:30</published>
      <updated>2018-08-09T03:30:00+05:30</updated>
      <id>https://pulkitsharma07.github.io/2018/08/09/managing-shell-commands</id>
      <content type="html" xml:base="https://pulkitsharma07.github.io/2018/08/09/managing-shell-commands/">&lt;p&gt;Before I joined my job, I had been a heavy Windows user. Apart from the “UNIX Programming” course in college, I had barely used any of the shell commands.&lt;/p&gt;

&lt;p&gt;In the initial days of the job, in order to run a previously executed shell command, I used to press the up arrow key on the keyboard to search for it.&lt;/p&gt;

&lt;h2 id=&quot;shell-reverse-search&quot;&gt;Shell Reverse Search&lt;/h2&gt;

&lt;p&gt;Turns out there is a neat way to search through your previously executed shell commands (All executed commands are stored in the bash history, for &lt;code class=&quot;highlighter-rouge&quot;&gt;zsh&lt;/code&gt; it is the &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.zsh_history&lt;/code&gt; file).
All you have to do is press &lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;r&lt;/kbd&gt; and then type some parts of the commands that you can recall.&lt;/p&gt;

&lt;p&gt;For instance, if I know that sometime back, I had used a command to figure out the role of a particular Redis instance. Then all I have to do is &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ctrl-r&amp;gt;role&lt;/code&gt; and the desired command while appear automagically !! (Keep pressing &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ctrl-r&amp;gt;&lt;/code&gt; to cycle through the results)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/casts/reverse_search.svg&quot; alt=&quot;reverse-search&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;aliases&quot;&gt;Aliases&lt;/h2&gt;

&lt;p&gt;One day, I was looking at my co-worker’s laptop while he was debugging some issue, and he started typing mysterious commands in the terminal like &lt;code class=&quot;highlighter-rouge&quot;&gt;gco master&lt;/code&gt;.
Turns out &lt;code class=&quot;highlighter-rouge&quot;&gt;zsh&lt;/code&gt; comes with a set of &lt;code class=&quot;highlighter-rouge&quot;&gt;aliases&lt;/code&gt;, which are like shortcuts to entire shell commands.&lt;code class=&quot;highlighter-rouge&quot;&gt;gco&lt;/code&gt; is an alias for &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout&lt;/code&gt;. If you feel that there is a command that you need frequently, it is a good idea to make an alias for it. This avoids typing the entire command, and you can always reverse search for the alias, as it should be easy to remember.&lt;/p&gt;

&lt;p&gt;To see existing aliases, you can run &lt;code class=&quot;highlighter-rouge&quot;&gt;alias -L&lt;/code&gt;. Creating a new alias is as simple as adding&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ping_redis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'redis-cli -h 100.100.100.100 ping'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;to your rc file (For &lt;code class=&quot;highlighter-rouge&quot;&gt;zsh&lt;/code&gt; it is primarily &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.zshrc&lt;/code&gt;).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;As you keep using the terminal, it may happen that you need some commands which are infrequently used but are important. For example one time configuration commands, installation steps, or some important queries to your database.&lt;/p&gt;

&lt;p&gt;Making an alias does not make sense for each of these commands as they are not frequently used and you’ll get overloaded with aliases to remember. Reverse search might not work if you don’t remember any part of the command (or the bash history file got deleted/truncated).&lt;/p&gt;

&lt;p&gt;I often found out that I had important commands scattered in different documents. Some of them might be in the OS X Notes app, some in an always running Sublime Text window or some found out by grepping &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.zsh_history&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once, I would’ve found the command; the next step was to copy, go to the terminal window, paste and execute that command.&lt;/p&gt;

&lt;h2 id=&quot;vim&quot;&gt;Vim&lt;/h2&gt;
&lt;p&gt;Why not use Vim?&lt;/p&gt;

&lt;p&gt;For me, I keep a &lt;code class=&quot;highlighter-rouge&quot;&gt;commands.sh&lt;/code&gt; file to take notes regarding all the important commands and use a handy little setting in the vimrc file to execute those commands from the file itself. Check out the demo…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/casts/commands_vim_demo.svg&quot; alt=&quot;commands-demo-vim&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can select the appropriate shell command in &lt;code class=&quot;highlighter-rouge&quot;&gt;visual&lt;/code&gt; mode and run them by pressing &lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here are the appropriate vimrc settings for &lt;code class=&quot;highlighter-rouge&quot;&gt;zsh&lt;/code&gt;. I had to do some digging on StackOverflow to get it to load my aliases.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;zsh
vnoremap &lt;span class=&quot;k&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;,'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;zsh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You need to ensure that your aliases are in &lt;code class=&quot;highlighter-rouge&quot;&gt;.zshenv&lt;/code&gt;, or you can make &lt;code class=&quot;highlighter-rouge&quot;&gt;.zshenv&lt;/code&gt; a symlink to &lt;code class=&quot;highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Keeping the shell commands in &lt;code class=&quot;highlighter-rouge&quot;&gt;commands.sh&lt;/code&gt; will allow you to write commands that you can later automate.
For instance, if you repeatedly SSH into a machine to run something in the Rails console, you can keep the following in your &lt;code class=&quot;highlighter-rouge&quot;&gt;commands.sh&lt;/code&gt; file instead:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh -t 100.100.100.100 &lt;span class=&quot;s2&quot;&gt;&quot;cd /some/dir/rails/;bundle exec rails console staging &amp;lt;&amp;lt;&amp;lt; 'Trash.delete_all'&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;What are your thoughts? How do you manage the growing set of commands you work with?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A neat way I found out today was to use comments to tag shell commands.
For example:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find . -name &lt;span class=&quot;s2&quot;&gt;&quot;*.sh&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#find shell scripts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once you execute the above, you can reverse search by doing &lt;code class=&quot;highlighter-rouge&quot;&gt;find shell scripts&lt;/code&gt;.
Sweet!&lt;/p&gt;

&lt;h3 id=&quot;helpful-resources&quot;&gt;Helpful Resources:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/2575545/vim-pipe-selected-text-to-shell-cmd-and-receive-output-on-vim-info-command-line/5373376#5373376&quot;&gt;https://stackoverflow.com/questions/2575545/vim-pipe-selected-text-to-shell-cmd-and-receive-output-on-vim-info-command-line/5373376#5373376&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://unix.stackexchange.com/questions/113462/how-can-i-make-shell-aliases-available-when-shelling-out-from-vim/197135#197135&quot;&gt;https://unix.stackexchange.com/questions/113462/how-can-i-make-shell-aliases-available-when-shelling-out-from-vim/197135#197135&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://unix.stackexchange.com/questions/26245/how-to-quickly-store-and-access-often-used-commands/26263#26263&quot;&gt;https://unix.stackexchange.com/questions/26245/how-to-quickly-store-and-access-often-used-commands/26263#26263&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      

      
        <category term="shell" />
      
        <category term="vim" />
      
        <category term="learning" />
      

      

      
        <summary type="html">Before I joined my job, I had been a heavy Windows user. Apart from the “UNIX Programming” course in college, I had barely used any of the shell commands.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Using Jekyll and Github Pages (in 2017)</title>
      
      <link href="https://pulkitsharma07.github.io/2017/09/23/using-jekyll-and-github-pages/" rel="alternate" type="text/html" title="Using Jekyll and Github Pages (in 2017)" />
      <published>2017-09-23T18:43:34+05:30</published>
      <updated>2017-09-23T18:43:34+05:30</updated>
      <id>https://pulkitsharma07.github.io/2017/09/23/using-jekyll-and-github-pages</id>
      <content type="html" xml:base="https://pulkitsharma07.github.io/2017/09/23/using-jekyll-and-github-pages/">&lt;p&gt;After reading numerous posts online for using Jekyll and Github Pages together, I faced couple of issues. Lets take a look and see how I addressed some of them.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Jekyll 3 now recommends using Gem-based themes. I was not able to find themes other than the ones mentioned &lt;a href=&quot;https://github.com/planetjekyll/awesome-jekyll-themes&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;The ones &lt;a href=&quot;https://pages.github.com/themes/&quot;&gt;supported&lt;/a&gt; by Github are not exactly blog like.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After spending considerable amount of time looking for a perfect theme (And giving up numerous times). I decided to go with the &lt;code class=&quot;highlighter-rouge&quot;&gt;whiteglass&lt;/code&gt; theme.&lt;/p&gt;

&lt;p&gt;I cloned the repo and had the blog running locally, it was time to push to my &lt;code class=&quot;highlighter-rouge&quot;&gt;.github.io&lt;/code&gt; repo. After, refreshing 3-4 times all I was staring at was a blank white screen. Soon, I got a mail from Github regarding a build warning.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You are attempting to use a Jekyll theme, “jekyll-whiteglass”, which is not supported by GitHub Pages&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-fix&quot;&gt;The Fix&lt;/h2&gt;

&lt;p&gt;Instead of serving a Jekyll Project directly from the &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch of the &lt;code class=&quot;highlighter-rouge&quot;&gt;github.io&lt;/code&gt; repository, we can instead serve the static files generated from the &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt; command, i.e. the contents of the &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; directory.
This way, we will remove dependency on Github Pages to build the Jekyll Project, instead it will only serve the static pages.&lt;/p&gt;

&lt;p&gt;Since, the &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch will have the “built” website, where should we store the actual Jekyll Project ?&lt;/p&gt;

&lt;p&gt;In my case I have stored it in the &lt;code class=&quot;highlighter-rouge&quot;&gt;development&lt;/code&gt; branch inside the same repository. I will work on the blog in this branch and will push the built website to the &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch. I have seen some repositories where people have written Travis jobs to do this exact thing. I feel that is an overkill, a slow process and downright exploitation of a free service. Please correct me if I am wrong.&lt;/p&gt;

&lt;p&gt;I have written a small shell script which will build the website and push the changes to the &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch. Here it is:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#! /bin/sh&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;BUILD_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./_site&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TMP_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/tmp/jekyll_build&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CURRENT_BRANCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git rev-parse --abbrev-ref HEAD&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Delete old build files if any&lt;/span&gt;
rm -rf &lt;span class=&quot;nv&quot;&gt;$BUILD_DIR&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Build&lt;/span&gt;
bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build

&lt;span class=&quot;c&quot;&gt;# If Build succeeds&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -d &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$BUILD_DIR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;JEKYLL: BUILD SUCCESS&quot;&lt;/span&gt;
    rm -r &lt;span class=&quot;nv&quot;&gt;$TMP_DIR&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Move BUILD_DIR to /tmp&lt;/span&gt;
    mv &lt;span class=&quot;nv&quot;&gt;$BUILD_DIR&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$TMP_DIR&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Change branch to master&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;git checkout master; &lt;span class=&quot;k&quot;&gt;then
      &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SUCCESSFULLY SWITCHED TO MASTER&quot;&lt;/span&gt;

      &lt;span class=&quot;c&quot;&gt;# Cleanup&lt;/span&gt;
      ls | xargs rm -r

      &lt;span class=&quot;c&quot;&gt;# Get the build&lt;/span&gt;
      mv &lt;span class=&quot;nv&quot;&gt;$TMP_DIR&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; .

      &lt;span class=&quot;c&quot;&gt;# Commit&lt;/span&gt;
      git add .
      git commit -m &lt;span class=&quot;s2&quot;&gt;&quot;Deploy &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;date&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;git push origin master; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;DEPLOYED SUCCESSFULLY !&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;basename &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git remote show -n origin | grep Fetch | cut -d: -f2-&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;DEPLOY FAILED !&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;fi
    else
      &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;CANNOT SWITCH BRANCH, ABORTING&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi

else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;JEKYLL: BUILD FAILURE&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;git checkout &lt;span class=&quot;nv&quot;&gt;$CURRENT_BRANCH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This script lives in the &lt;code class=&quot;highlighter-rouge&quot;&gt;development&lt;/code&gt; branch.&lt;/p&gt;

&lt;p&gt;After I am done doing my changes to the blog. I push them to the &lt;code class=&quot;highlighter-rouge&quot;&gt;development&lt;/code&gt; branch, and then do &lt;code class=&quot;highlighter-rouge&quot;&gt;./deploy&lt;/code&gt;. The script will then make a new commit on &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; having your latest masterpiece.&lt;/p&gt;

&lt;h2 id=&quot;why-i-dont-like-the-gem-based-themes&quot;&gt;Why I don’t like the gem based themes.&lt;/h2&gt;

&lt;p&gt;I have added the &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy&lt;/code&gt; script as a post-commit hook, but unfortunately some changes do not require a commit.&lt;/p&gt;

&lt;p&gt;This is because most of the theme related code is now inside the gem’s directory (i.e. not inside my git repo). So, say If I want to change the Google Analytics tracking script, then I’ll need to do the changes in the &lt;code class=&quot;highlighter-rouge&quot;&gt;google_analytics.html&lt;/code&gt; file. Since, this file is inside the gem’s directory (in my case at &lt;code class=&quot;highlighter-rouge&quot;&gt;/Users/pulkit/.rvm/gems/ruby-2.2.5/gems/jekyll-whiteglass-1.3.0/_includes/&lt;/code&gt;), I cannot make a commit on &lt;code class=&quot;highlighter-rouge&quot;&gt;development&lt;/code&gt; to reflect this change.&lt;/p&gt;

&lt;p&gt;Gem based themes are good for people who are new to Jekyll and do not wish to modify the themes they use. Since, most of the theme related code is now present in some other directory, users will not be overwhelmed from the directory structure when they do &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll new&lt;/code&gt;.
But sooner or later, you’ll need to make some changes to the theme (changing the font size for example). Doing those changes in some other directory and not inside version control is pretty cumbersome and will hurt in the future.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: Found out this &lt;a href=&quot;https://jekyllrb.com/docs/themes/#converting-gem-based-themes-to-regular-themes&quot;&gt;https://jekyllrb.com/docs/themes/#converting-gem-based-themes-to-regular-themes&lt;/a&gt;, this will make your git repo to have all the code ! But then, what is the point of gem-based themes ?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Discussion on &lt;a href=&quot;https://news.ycombinator.com/item?id=15354908&quot;&gt;HackerNews&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="jekyll" />
      
        <category term="blog" />
      
        <category term="github" />
      

      

      
        <summary type="html">After reading numerous posts online for using Jekyll and Github Pages together, I faced couple of issues. Lets take a look and see how I addressed some of them.</summary>
      

      
      
    </entry>
  
  
</feed>
